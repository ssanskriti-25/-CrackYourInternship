Question Link:  https://practice.geeksforgeeks.org/problems/max-rectangle/1?utm_source=geeksforgeeks&utm_medium=article_practice_tab&utm_campaign=article_practice_tab
Solution:
 int solve(vector<int>& h){
      int n= h.size();
      vector<int>left_smaller(n);
      vector<int>right_smaller(n);
      stack<int>st;
      for(int i=0;i<n;i++){
          while(st.empty()==false and h[st.top()]>=h[i]){
              st.pop();
          }
          if(st.empty()){
              left_smaller[i]= 0;
          }
          else if(h[st.top()]<h[i])
          left_smaller[i]= st.top()+1;
          st.push(i);
      }
      
      while(!st.empty()){
          st.pop();
      }
      
      for(int i=n-1;i>=0;i--){
          while(st.empty()==false and h[st.top()]>=h[i]){
              st.pop();
          }
          if(st.empty()){
              right_smaller[i]= n-1;
          }
          else if(h[st.top()]<h[i])
          right_smaller[i]= st.top()-1;
          st.push(i);
      }
      int ans= INT_MIN;
      for(int i=0;i<n;i++){
          int area= (right_smaller[i]-left_smaller[i]+1)*h[i];
          ans= max(ans, area);
      }
      return ans;
  }
  
 
  
    int maxArea(int M[MAX][MAX], int n, int m) {
        // Your code here
        vector<int>h(m,0);
        int ans1= INT_MIN;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(M[i][j]==1) h[j]++;
                else
                h[j]=0;
            }
            // for(int i=0;i<m;i++){
                // cout<<h[i]<<"  ";
            // }
            // cout<<endl;
            // cout<<solve(h)<<endl;
          ans1= max(ans1, solve(h)); 
        }
        return ans1;
    }
